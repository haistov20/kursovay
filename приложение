MyGame.cpp 
#include "includes.h" 
#include "main.h" 

int main(int argc, char *argv[]) 
{ 
Main _main; 
_main.menu(); 
return 0; 
} 
sprite.h 
#pragma once 
class Sprite 
{ 
public: 
Sprite(SDL_Renderer* passed_render, std :: string FilePath, int x, int y, int w, int h); 
~Sprite(); 
void draw(); 
void drawFlip(double angle , SDL_Point* centre); 
void setX(int x); 
void setY(int y); 
void setPosition(int x,int y); 
int getX(); 
int getY(); 
bool playOne(int beginFrame, int endFrame, float speed); 
void setUpAnimation(int passed_amount_frameX,int passed_amount_frameY); 
bool playAnimation(int beginFrame, int endFrame, int row, float speed); 
private: 
SDL_Texture* image; 
SDL_Rect rect; 
SDL_Rect crop; 
SDL_Renderer* render; 
int img_w; 
int img_h; 
int currentFrame; 
int timeCheck; 

int amount_frameX; 
int amount_frameY; 

}; 


sprite.cpp 
#include "includes.h" 
#include "sprite.h" 
#include "setup.h" 

Sprite::Sprite(SDL_Renderer* passed_render,std::string FilePath, int x, int y, int w, int h) 
{ 
render = passed_render; 
image = NULL; 
image = IMG_LoadTexture(render, FilePath.c_str()); 
if (!image) printf("Error: Cant load image %s - %s\n", FilePath.c_str(), SDL_GetError); 

SDL_QueryTexture(image, NULL, NULL, &img_w, &img_h); 

rect.x = x; rect.y = y; 
rect.h = h; rect.w = w; 

crop.x = 0; crop.y = 0; crop.h = img_h; crop.w = img_w; 

currentFrame = 0; 
timeCheck = 0; 
} 


Sprite::~Sprite() 
{ 
SDL_DestroyTexture(image); 
SDL_DestroyRenderer(render); 
} 

void Sprite::draw() 
{ 
SDL_RenderCopy(render, image, &crop, &rect); 
} 

void Sprite::drawFlip(double angle , SDL_Point* center) 
{ 
SDL_RenderCopyEx(render, image, &crop, &rect,angle, cen-ter,SDL_FLIP_NONE); 
} 

void Sprite::setX(int x) 
{ 
rect.x = x; 
} 

void Sprite::setY(int y) 
{ 
rect.y = y; 
} 

void Sprite::setPosition(int x, int y) 
{ 
rect.x = x; rect.y = y; 
} 

int Sprite::getX() 
{ 
return rect.x; 
} 

int Sprite::getY() 
{ 
return rect.y; 
} 

bool Sprite::playOne(int beginFrame, int endFrame, float speed) 
{ 
bool flag = false; // прохождение 1й анимации 
if (timeCheck + speed < SDL_GetTicks()) 
{ 
if (endFrame <= currentFrame) 
{ 
currentFrame = beginFrame; 
flag = true; 
} 
else 
{ 
currentFrame++; 
flag = false; 
} 
if(currentFrame == 0) crop.x = 0; 
else crop.x = currentFrame*(img_w / amount_frameX); 
crop.y = 0; 
crop.w = img_w / amount_frameX; 
crop.h = img_h / amount_frameY; 
timeCheck = SDL_GetTicks(); 
} 
return flag; 
} 

void Sprite::setUpAnimation(int passed_amount_frameX, int passed_amount_frameY) 
{ 
amount_frameX = passed_amount_frameX; 
amount_frameY= passed_amount_frameY; 
} 

bool Sprite::playAnimation(int beginFrame, int endFrame, int row, float speed) 
{ 
bool flag = false; // прохождение 1й анимации 
if (timeCheck + speed < SDL_GetTicks()) 
{ 
if (endFrame <= currentFrame) 
{ 
currentFrame = beginFrame; 
flag = true; 
} 
else 
{ 
currentFrame++; 
flag = false; 
} 
crop.x = currentFrame*(img_w / amount_frameX -1); 
crop.y = row*(img_h / amount_frameY -2); 
crop.w = img_w / amount_frameX; 
crop.h = img_h / amount_frameY; 
timeCheck = SDL_GetTicks(); 
} 

return flag; 
} 


setup.h 
#pragma once 
class Setup 
{ 
public: 
Setup(bool* quit); 
~Setup(); 
SDL_Renderer *getRender(); 
SDL_Event *getEvent(); 

void begin(); 
void end(); 
private: 
SDL_Window* window; 
SDL_Renderer* render; 
SDL_Event* event; 
}; 
setup.cpp 
#include "includes.h" 
#include "setup.h" 


Setup::Setup(bool* quit) 
{ 
SDL_Init(SDL_INIT_EVERYTHING); 
window = NULL; 
window = SDL_CreateWindow("One Button Bob", 150, 30, SCREEN_W, SCREEN_H, SDL_WINDOW_SHOWN); 
if (window == NULL) { 
printf("Error: cant create the window\n"); 
*quit = true; 
} 
render = NULL; 
render = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED); 
event = new SDL_Event(); 
if (Mix_OpenAudio(22050, MIX_DEFAULT_FORMAT, 2, 4096) == -1) { 
puts("Error: can`t Mix_OpenAudio"); 
*quit = true; 

} 
} 


Setup::~Setup() 
{ 
SDL_DestroyWindow(window); 
SDL_DestroyRenderer(render); 
Mix_CloseAudio(); 
delete event; 
} 

SDL_Renderer * Setup::getRender() 
{ 
return render; 
} 

SDL_Event * Setup::getEvent() 
{ 
return event; 
} 

void Setup::begin() 
{ 
SDL_PollEvent(event); 
SDL_RenderClear(render); 
} 

void Setup::end() 
{ 
SDL_RenderPresent(render); 
} 
player.h
#pragma once
#include "sprite.h"
#include "setup.h"
#include "bomerang.h"
class Player
{
public:
	Player();
	Player(Setup* passed_setup);
	~Player();
	void draw();
	void udpate(int i);
	int getX();
	int getY();
	void setX(int x);
	void setY(int y);
	bool die(bool die, Sprite* passed_sprite);
	void run(bool run,int side);
	bool jump(int k,bool jump,bool draw, bool restart);
private:
	Sprite* myHero;
	Setup* setup;
	Sprite* map;
	Sprite* meter;
	Sprite* red[6];
	Mix_Chunk *die_effect= NULL;
	Mix_Chunk *jump_effect = NULL;
	int timeCheck;
	int lvl_num;

};


player.cpp
#include "includes.h"
#include "player.h"


Player::Player()
{
}

Player::Player(Setup* passed_setup)
{
	setup = passed_setup;
	myHero = new Sprite(setup->getRender(), "Data/img/hero.png", 0, START_HERO_POSY, 19 * INCREASE_HERO_Y, 18 * INCREASE_HERO_X);
	myHero->setUpAnimation(6, 3);
	meter = new Sprite(setup->getRender(), "Data/img/force_meter.png", getX() + 40, getY() - 20, (13 * 7) - 3, 4 * 5);
	for (int i = 0; i < 6; i++)
		red[i] = new Sprite(setup->getRender(), "Data/img/red.png", meter->getX() + 7, meter->getY() + 5, 5 * 5, 2 * 5);
	timeCheck = SDL_GetTicks();
	lvl_num = 0;
	die_effect= Mix_LoadWAV("Data/audio/dead.wav ");
	if (die_effect == NULL) puts("Can`t open Data/audio/dead.wav");
	jump_effect = Mix_LoadWAV("Data/audio/Jump.wav ");
	if (die_effect == NULL)  puts("Can`t open Data/audio/Jump.wav");
	Mix_VolumeChunk(jump_effect, MIX_MAX_VOLUME / 2);

}


Player::~Player()
{
	delete setup;
	delete myHero;
	delete meter;
	delete map;
	for (int i = 0; i < 6; i++)
		delete red[i];
	Mix_FreeChunk(die_effect);
	Mix_FreeChunk(jump_effect);
}

void Player::draw()
{
	myHero->draw();
}

void Player::udpate(int i)
{
	double angle = 0;
	myHero->playAnimation(0, 1, i, 200);
	myHero->draw();

}

int Player::getX()
{
	return myHero->getX();
}

int Player::getY()
{
	return myHero->getY();
}

void Player::setX(int x)
{
	myHero->setX(x);
}

void Player::setY(int y)
{
	myHero->setY(y);
}

bool Player::die(bool die, Sprite* passed_sprite)
{
	map = passed_sprite;
	static bool shake = true;
	static int shake_num = 0, play_effect = true;
	if (die)
	{
		if (play_effect)
		{
			Mix_PlayChannel(-1, die_effect, 0);
			play_effect = false;
		}
		if (shake && shake_num <= 3)
		{
			map->setY(map->getY() + 2);
				if (map->getY() >= 10) shake = false;
		}
		else if (shake_num < 3)
		{
			map->setY(map->getY() - 2);
			if (map->getY() <= -10)
			{
				shake = true; shake_num++;
			}

		}
		if (myHero->playAnimation(0, 5, 1, 75) )
		{
			myHero->setPosition(0, START_HERO_POSY);
			map->setY(0);
			shake_num = 0; play_effect = true;
			return true;
		} 	
	}
	
	return false;
}

void Player::run(bool run,int side)
{
	if (run)
	{
		if (timeCheck + 10 < SDL_GetTicks())
		{
			myHero->setX(myHero->getX() + (2*side));
			timeCheck = SDL_GetTicks();
		}
	}
}

bool Player::jump(int k, bool jump,bool draw,bool restart)
{	

	static bool do_it = true, play_effect = true;
	if (restart)
	{
		do_it = true;
		play_effect = true;
	}
	int dest = (25 * k);
	if (draw)
	{
		meter->setPosition(getX() + 40, getY() - 20);
		meter->draw();
		red[0]->setPosition(meter->getX() + 7, meter->getY() + 5);
		for (int i = 0; i < k; i++)
		{
			if (i != 0) red[i]->setPosition(red[i - 1]->getX() + 10, red[i - 1]->getY());
			red[i]->draw();
		}
	}
	if (jump) {
		if (play_effect) {
			Mix_PlayChannel(-1, jump_effect, 0);
			play_effect = false;
		}
		if (do_it)
		{
			if (START_HERO_POSY - getY() >= dest) do_it = false;
			else {
				if (timeCheck + 4 < SDL_GetTicks())
				{
					setY(getY() - 3);
					setX(getX() + 2);
					timeCheck = SDL_GetTicks();
				}
				
			}
			
			
		}
		else {
			if (START_HERO_POSY - getY() <= 0)
			{
				do_it = true; play_effect = true;
				return true;
			}
			else
			{
				if (timeCheck + 4 < SDL_GetTicks())
				{
					setY(getY() + 3);
					setX(getX() + 2);
					timeCheck = SDL_GetTicks();
				}
				
			}
			
		}
	}

	return false;
	
}

main.h
#pragma once
#include "sprite.h"
#include "setup.h"
#include "level.h"

class Main
{
public:
	Main();
	~Main();
	void GameLoop();
	void menu();
	void sound(int x,int y);
	bool lvl_pause(int x, int y);
	void victory(int x, int y);
private:
	bool quit;
	Setup* setup;
	Level* lvl;
	Sprite* back, *play, *pause, *exit, *volume, *resume,
		*pause_screen, *massage, *new_game, *load_game,
		*save_massage, *yes, *no;
	Sprite* myHero;
	FILE *file_out;
};


main.cpp
#include "includes.h"
#include "main.h"
#include <cstdio>


Main::Main()
{
	quit = false;
	setup = new Setup(&quit);
	lvl = new Level(setup);
	back = new Sprite(setup->getRender(),"Data/img/bg.png", 0, 0, SCREEN_W, SCREEN_H);
	play = new Sprite(setup->getRender(), "Data/img/play.png", SCREEN_W/2.5 - 15, SCREEN_H/8,280, 200);
	exit = new Sprite(setup->getRender(), "Data/img/exit.png", SCREEN_W / 2.5 - 15, SCREEN_H /8 + 150, 280, 200);
	play->setUpAnimation(2, 1); exit->setUpAnimation(2, 1);

	myHero = new Sprite(setup->getRender(), "Data/img/hero.png", 0, START_HERO_POSY, 19 * INCREASE_HERO_Y, 18 * INCREASE_HERO_X);
	myHero->setUpAnimation(6, 3);

	volume= new Sprite(setup->getRender(), "Data/img/volume.png", SCREEN_W  - 85, -17 , 53, 87);
	volume->setUpAnimation(3, 1);
	pause = new Sprite(setup->getRender(), "Data/img/pause_button.png", SCREEN_W - 140, -15, 53, 87);
	pause->setUpAnimation(2, 1);

	resume = new Sprite(setup->getRender(), "Data/img/resume.png", SCREEN_W / 6 + 30, SCREEN_H /1.6, 280, 200);
	resume->setUpAnimation(2, 1);
	pause_screen = new Sprite(setup->getRender(), "Data/img/pause.png", 0, 0, SCREEN_W, SCREEN_H);

	massage = new Sprite(setup->getRender(), "Data/img/massage.png",150, 70, 900*0.8, 600*0.8);
	new_game = new Sprite(setup->getRender(), "Data/img/new_game.png", 320,250, 280 * 0.7, 200 * 0.7);
	new_game->setUpAnimation(2, 1);
	load_game = new Sprite(setup->getRender(), "Data/img/load_game.png", 530, 250, 280*0.7, 200 * 0.7);
	load_game->setUpAnimation(2, 1);

	save_massage = new Sprite(setup->getRender(), "Da-ta/img/save_massage.png", 0, 0, SCREEN_W, SCREEN_H);
	yes = new Sprite(setup->getRender(), "Data/img/yes.png", 370, 267, 247 * 0.5, 400 * 0.5);
	yes->setUpAnimation(2, 1);
	no = new Sprite(setup->getRender(), "Data/img/no.png", 550, 265, 247 * 0.5, 400 * 0.5);
	no->setUpAnimation(2, 1);
	
}


Main::~Main()
{
	delete play;
	delete exit;
	delete volume;
	delete	pause;
	delete setup;
	delete lvl;
	delete myHero;
	delete resume;
	delete	pause_screen;
	delete	massage;
	delete new_game;
	delete load_game;
	delete save_massage;
	delete yes;
	delete no;
}


void Main::menu()
{
	int x = 0, y = 0; 
	bool but_play = false;
	bool press = false;
	FILE* checkpoint=NULL;
	fopen_s(&checkpoint,"Data/checkpoint.bin", "rb");
	if (checkpoint == NULL) puts("NO FILE");
	while (quit != true)
	{
		setup->begin();
			back->draw();
			
			myHero->playAnimation(0, 1, 0, 200);
			myHero->draw();
			if (setup->getEvent()->type == SDL_MOUSEMOTION) {  // если было движение установим новые координаты курсора
				x = setup->getEvent()->motion.x;
				y = setup->getEvent()->motion.y;

			}
			if ((x > play->getX()) && (x < play->getX() + 280) && (y > play->getY()) && (y < play->getY() + 150)) { // Кнопка play
				play->playOne(1, 1, 0);
				if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
					if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
						 but_play = true;
					}
				}
			}
			else play->playOne(0, 0, 0);

			if ((x > exit->getX() && (x < exit->getX() + 280) && (y > exit->getY()) && (y < exit->getY() + 150))) { // Кнопка exit
				exit->playOne(1, 1, 0);
				if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
					if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
						quit = true;
					}
				}
			}
			else exit->playOne(0, 0, 0);
			if (checkpoint == NULL && but_play) { if (setup->getEvent()->type == SDL_MOUSEBUTTONUP) GameLoop(); }
			else if(but_play)
			{ // дочернее play
				play->setX(GETOUT);
				exit->setX(GETOUT);
				load_game->draw();
				new_game->draw();
				massage->draw();
				if ((x > load_game->getX()) && (x < load_game->getX() + 280 * 0.7) && (y > load_game->getY()) && (y < load_game->getY() + 150)) { // Кнопка LOAD GAME
					load_game->playOne(1, 1, 0);
					if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
						if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
							fread(&lvl->lvl_num, 1, 1, check-point);
							fread(&lvl->click, 1, 1, check-point);
							fclose(checkpoint);
							press = true;
						}
					}
				}
				else load_game->playOne(0, 0, 0);
				if ((x > new_game->getX() && (x < new_game->getX() + 280 * 0.7) && (y > new_game->getY()) && (y < new_game->getY() + 150))) { // Кнопка NEW GAME
					new_game->playOne(1, 1, 0);
					if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
						if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
								if (checkpoint != NULL) fclose(checkpoint);
										re-move("Data/checkpoint.bin");
										press = true;
								}
						}
					}
					
				else new_game->playOne(0, 0, 0);
				if (press && setup->getEvent()->type == SDL_MOUSEBUTTONUP) GameLoop();

			}
			
			play->draw();
			exit->draw();
			sound(x, y);
	
		setup->end();
	}
}

void Main::sound(int x, int y)
{
	static bool key_pressed = false;
	static int position = 0;

	if ((x > volume->getX()) && (x < volume->getX() + 50) && (y > volume->getY()) && (y < volume->getY() + 70)) { // Кнопка музыки
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
				key_pressed = true;
			}
		}
	}
	volume->playOne(position, position, 0);
	volume->draw();
	if (key_pressed) {
		if (setup->getEvent()->type == SDL_MOUSEBUTTONUP)
		{
			if (!position)
			{
				position = 2;
				Mix_PauseMusic();
				Mix_Volume(-1, 0);
			}
			else
			{
				position = 0;
				Mix_ResumeMusic();
				Mix_Volume(-1, MIX_MAX_VOLUME );
			}
			key_pressed = false;

		}
	}
}

bool Main::lvl_pause(int x, int y)
{
	static bool  exit_pause = false, key_pressed = false, but_play = false;
	bool save_toFile = false;
	exit->setPosition(SCREEN_W / 6 + 380, SCREEN_H / 1.6);
	pause_screen->draw();
	if ((x > resume->getX()) && (x < resume->getX() + 280) && (y > resume->getY()) && (y < resume->getY() + 120)) { // Кнопка resume
		resume->playOne(1, 1, 0);
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
				key_pressed = true; but_play = true;
			}
		}

	}
	else resume->playOne(0, 0, 0);
	if ((x > exit->getX() && (x < exit->getX() + 280) && (y > exit->getY()) && (y < exit->getY() + 120))) { // Кнопка exit
		exit->playOne(1, 1, 0);
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
				exit_pause = true;
				if (lvl->lvl_num == 0) quit = true;
			}
		}
	}
	else exit->playOne(0, 0, 0);


	if (exit_pause && lvl->lvl_num) {
		resume->setX(GETOUT);
		exit->setX(GETOUT);
		save_massage->draw();
		yes->draw();
		no->draw();
		if ((x > yes->getX()) && (x < yes->getX() + 247 * 0.4) && (y > yes->getY()) && (y < yes->getY() + 400 * 0.4)) { // Кнопка yes
			yes->playOne(1, 1, 0);
			if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
				if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
					puts("save to file");
					fopen_s(&file_out, "Data/checkpoint.bin", "wb");
					if (file_out == NULL) puts("Can`t create file");
					fwrite(&lvl->lvl_num, 1, 1, file_out);
					fwrite(&lvl->click, 1, 1, file_out);
					fclose(file_out);
					quit = true;
				}
			}
		}
		else yes->playOne(0, 0, 0);

		if ((x > no->getX() && (x < no->getX() + 247 * 0.4) && (y > no->getY()) && (y < no->getY() + 400 * 0.4))) { // Кнопка no
			no->playOne(1, 1, 0);
			if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
				if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
					quit = true;
				}
			}
		}
		else no->playOne(0, 0, 0);
	}
	if (setup->getEvent()->type == SDL_MOUSEBUTTONUP && key_pressed)
	{
		but_play = false;
		key_pressed = false;
		return true;
	}

	resume->draw();
	exit->draw();
	return false;
}

void Main::victory(int x, int y)
{
	static bool key_pressed = false, first = true;
	if (first)
	{
		exit->setPosition(SCREEN_W / 6 + 465, SCREEN_H / 1.6 );
	}
	if ((x > exit->getX() && (x < exit->getX() + 280) && (y > exit->getY()) && (y < exit->getY() + 120))) { // Кнопка exit
		exit->playOne(1, 1, 0);
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
				quit = true; return;
			}
		}
	}
	else exit->playOne(0, 0, 0);
	exit->draw();

}



void Main::GameLoop()
{
	int x = 0, y = 0;
	bool system_pause = false;
	bool key_press = false;
	while (quit != true)
	{
		if (setup->getEvent()->type == SDL_MOUSEMOTION) {  // если было движение установим новые координаты курсора
			x = setup->getEvent()->motion.x;
			y = setup->getEvent()->motion.y;

		}
		setup->begin();
		if (!system_pause)lvl->update();
		if (!lvl->final)
		{
			if ((x > pause->getX() && (x < pause->getX() + 50) && (y > pause->getY()) && (y < pause->getY() + 70))) { // Кнопка pause
				pause->playOne(1, 1, 0);
				if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) {
					if (setup->getEvent()->button.button == SDL_BUTTON_LEFT) {
						key_press = true;
					}
				}
				if (key_press) if (setup->getEvent()->type == SDL_MOUSEBUTTONUP)
				{
					system_pause = true;
					key_press = false;
					Mix_PauseMusic();
					Mix_Volume(-1, 0);
				}
			}
			else pause->playOne(0, 0, 0);
			pause->draw();
		}
		sound(x, y);
		if (lvl->final) victory(x,y);
		if (system_pause ) if (lvl_pause(x, y))
		{
			puts("return true");
			system_pause = false;
			Mix_ResumeMusic();
			Mix_Volume(-1, MIX_MAX_VOLUME );
		}
		setup->end();
		SDL_Delay(5);
	}
}

level.h
#pragma once
#include "sprite.h"
#include "setup.h"
#include "player.h"
#include "bomerang.h"



class Level
{
public:
	Level(Setup* passed_setup);
	~Level();
	int click, lvl_num;
	bool final = false;
	void draw(int i);
	void update();
	void lvl_0();
	void lvl_1();
	void lvl_2();
	void lvl_3();
	void lvl_4();
	void lvl_5();
	void lvl_6();
	void lvl_7();
	void lvl_8();
	void lvl_9();
	void victory();
	void writeText();
	bool mousePos();
private:
	Sprite* lvl[LVL], *lava[LAVA], *fire[FIRE], *you_click[CLICK];
	//LVL 1
	Sprite* bat;
	Bomerang* bomerang;
	//LVL 2
	Sprite* arrow[ARROW];
	//LVL 3
	Sprite* platform[PLATFORM];
	//LVL 4
	Sprite *ledder[LEDDER], *bomb[BOMB], *ghost;
	// LVL 6
	Sprite* spike;
	// LVL 10
	Sprite* boss, *hp_metr, *hp[HP], *rock[ROCK], *Victory;
	/////////////////
	Player* player;
	Setup* setup;
	Mix_Music *music = NULL, *vik = NULL;
	Mix_Chunk *bomerang_effect = NULL;
	Mix_Chunk *ghost_effect = NULL;
	Mix_Chunk *hurt = NULL;
	Mix_Chunk *boss_dead = NULL;
	Mix_Chunk *jumpB = NULL;
	int timeCheck, dest;
	bool flyUp; // Движение летуч. мыши
	bool die, shoot, run;

};


level.cpp
#include "includes.h"
#include "level.h"
#include <stdio.h>
#include <cstring>



Level::Level(Setup* passed_setup)
{
	dest = 0;
	lvl_num = 0;
	click = 0;
	setup = passed_setup;
	char str[30];
	for (int i = 0; i < LVL; i++)
	{
		sprintf_s(str,27,"%s%i%s", "Data/img/level_",i, ".png");
		printf("%s\n", str);
		lvl[i] = new Sprite(setup->getRender(), str, 0, 0, SCREEN_W, SCREEN_H);
	}
	for (int i = 0; i < LAVA; i++)
	{
		lava[i] = new Sprite(setup->getRender(), "Data/img/lava.png", dest, LAVA_Y, 14 * 6, 20 * 6	);
		lava[i]->setUpAnimation(14, 1);
		dest += 180;
	}

	dest = 190;
	for (int i = 0; i < ARROW; i++)
	{
		arrow[i] = new Sprite(setup->getRender(), "Data/img/arrow.png", dest, START_ARROW_Y, 20 * 5, 20 * 5);
		dest += rand() % 300 + 170;
	}
	dest = 190;
	for (int i = 0; i < PLATFORM; i++)
	{
		platform[i] = new Sprite(setup->getRender(), "Da-ta/img/platform.png", dest, START_PLATFORM_Y, 10 * 9, 10 * 5);
		platform[i]->setUpAnimation(11, 1);
		dest += 170;
	}

	dest = 20;
	for (int i = 0; i < FIRE; i++)
	{
		fire[i] = new Sprite(setup->getRender(), "Data/img/fire.png", dest, START_FIRE_Y, 20*5, 30*5);
		fire[i]->setUpAnimation(4, 1);
		dest += 430;
	}
	dest = 240;
	for (int i = 0; i < LEDDER; i++)
	{
		ledder[i] = new Sprite(setup->getRender(), "Data/img/ledder.png", dest, START_LEDDER_Y, 10 * 10, 45 * 5);
		dest += 240;
	}
	dest = 340;
	for (int i = 0; i < BOMB; i++)
	{
		bomb[i] = new Sprite(setup->getRender(), "Data/img/bomb.png", dest, START_BOMB_Y, 12 * 6, 20 * 6);
		bomb[i]->setUpAnimation(8, 1);
		dest += 480;
	}

	bomerang = new Bomerang(setup);
	ghost = new Sprite(setup->getRender(), "Data/img/ghost.png",540, START_HERO_POSY - 140, 20 * 7, 20 * 7);
	ghost->setUpAnimation(4, 1);

	spike = new  Sprite(setup->getRender(), "Data/img/spike_ceiling.png",0, SPIKE_POS_Y, SCREEN_W , SCREEN_H );

	player = new Player(setup);
	bat = new Sprite(setup->getRender(), "Data/img/bat.png", BAT1_START_X, BAT1_START_Y, 10*INCREASE_HERO_X, 12 * INCREASE_HERO_Y);
	bat->setUpAnimation(4, 1);

	boss = new Sprite(setup->getRender(), "Data/img/boss.png", START_BOSS_X, START_BOSS_Y, 28 * 7 , 35 * 6);
	boss->setUpAnimation(2, 1);
	hp_metr = new Sprite(setup->getRender(), "Data/img/force_meter.png", boss->getX() - 100, boss->getY() - 20, 200 , 30);
	for (int i = 0; i < HP; i++)
		hp[i] = new Sprite(setup->getRender(), "Data/img/red.png", hp_metr->getX() + 7, hp_metr->getY() + 5, 5 * 3, 3 * 5);
	timeCheck = SDL_GetTicks();
	dest = 300;
	for (int i = 0; i < ROCK; i++)
	{
		rock[i] = new Sprite(setup->getRender(), "Data/img/rock.png", dest, START_ROCK, 10 * 7, 10 * 7);
		dest += 140;
	}

	dest = 10;
	for (int i = 0; i < CLICK; i++)
	{
		you_click[i] = new Sprite(setup->getRender(), "Data/img/font.png", dest, 5, 30*1.25, 35*1.25);
		you_click[i]->setUpAnimation(10, 1);
		dest += 30;
	}

	bomerang_effect= Mix_LoadWAV("Data/audio/boomerang.wav");
	if (bomerang_effect == NULL) puts("Can`t find Da-ta/audio/boomerang.wav");

	ghost_effect = Mix_LoadWAV("Data/audio/ghost.wav");
	if (ghost_effect == NULL) puts("Can`t find Data/audio/ghost.wav");

	hurt = Mix_LoadWAV("Data/audio/hurt.wav");
	if (hurt == NULL) puts("Can`t find Data/audio/hurt.wav");
	boss_dead = Mix_LoadWAV("Data/audio/boss_dead.wav");
	if (boss_dead == NULL) puts("Can`t find Data/audio/boss_dead.wav");

	jumpB = Mix_LoadWAV("Data/audio/boss_jump.wav");
	if (jumpB== NULL) puts("Can`t find Data/audio/boss_jump.wav");

	music = Mix_LoadMUS("Data/audio/theme.wav");
	if (music == NULL) puts("Can`t find Data/audio/theme.wav");
	Mix_PlayMusic(music, -1);

	vik = Mix_LoadMUS("Data/audio/victory.wav");
	if (vik == NULL) puts("Can`t find Data/audio/victory.wav");
	Victory = new Sprite(setup->getRender(), "Data/img/end.png", 0, 0, SCREEN_W, SCREEN_H);

	Mix_Volume(-1, MIX_MAX_VOLUME);
	Mix_VolumeMusic(MIX_MAX_VOLUME/3);
	flyUp = true;
	die = false;
	shoot = false;
	run = true;
}


Level::~Level()
{
	int i = 0;
	for (i = 0; i < LVL; i++)
	 delete lvl[i];
	for (i = 0; i < LAVA; i++)
		delete lava[i];
	for (i = 0; i < PLATFORM; i++)
		delete platform[i];
	for (i = 0; i < ARROW; i++)
		delete arrow[i];
	for (i = 0; i < BOMB; i++)
		delete bomb[i];
	for (i = 0; i < LEDDER; i++)
		delete ledder[i];
	for (i = 0; i < HP; i++)
		delete hp[i];
	for (i = 0; i < CLICK; i++)
		delete you_click[i];
	delete bat;
	delete ghost;
	delete spike;
	delete hp_metr;
	delete Victory;

	Mix_FreeChunk(bomerang_effect);
	Mix_FreeChunk(ghost_effect);
	Mix_FreeChunk(hurt);
	Mix_FreeChunk(boss_dead);
	Mix_FreeChunk(jumpB);
	Mix_FreeMusic(music);
	
}

void Level::draw(int i)
{
	lvl[i]->draw();
	if (i)
	{
		for (int j = 0; j < LAVA; j++)
		{
			lava[j]->draw();
			if (lava[j]->playOne(0, 13, 100))
				lava[j]->setX(rand() % SCREEN_W);
				
		}

		for (int j = 0; j < FIRE; j++)
		{
			fire[j]->draw();
			fire[j]->playOne(0, 3, 60);
		}
		
	}	
	
}

void Level::update()
{
	static bool key_pressed = false;
	if (lvl_num < LVL)draw(lvl_num);
	if (player->getX() + 80 >= SCREEN_W) {
		if (lvl_num + 1 < LVL )
		{
			lvl_num++;
			player->setX(0);
			player->setY(START_HERO_POSY);
		}

	}
	if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN) //кол-во кликов
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			key_pressed = true;
	
	switch (lvl_num)
	{
	case 0:
		lvl_0();
		break;
	case 1:
		lvl_1();
		break;
	case 2:
		lvl_2();
		break;
	case 3:
		lvl_3();
		break;
	case 4:
		lvl_4();
		break;
	case 5:
		lvl_5();
		break;
	case 6:
		lvl_6();
		break;
	case 7:
		lvl_7();
		break;
	case 8:
		lvl_8();
		break;
	case 9:
		lvl_9();
		break;
	
	default:
		break;
	}
	if (player->getX() + 80 >= SCREEN_W  && lvl_num+1==LVL) victory();
	else if (key_pressed )
	{
		if (setup->getEvent()->type == SDL_MOUSEBUTTONUP && mousePos())
		{
			click++;
			key_pressed = false;
		}

	}
	writeText();

}

void Level::lvl_0()
{
	static double angle = 0;
	static bool bom_fly = true, bat_die = false;
	static bool keyPressd = false, play_shot = true;
		player->udpate(2);
		if (!shoot)
		{
			bomerang->setX(player->getX() + 115);
			bomerang->draw();
		}
		else
		{
			bomerang->drawFlip(angle);
			if (bomerang->getX() - player->getX() <= 300 && bom_fly)
			{
				bomerang->setX(bomerang->getX() + 4);
				if (bomerang->getX() - bat->getX() >= 50)
				{
					//bom_fly = false;
					bat_die = true;
					
				}
			}
			else {
				bom_fly = false;
				if (bomerang->getX() - player->getX() >= 115) bomerang->setX(bomerang->getX() - 4);
				if (bomerang->getX() - player->getX() <= 115)
				{
					shoot = false;
					bom_fly = true;
					play_shot = true;
				}
			}
			angle += 15;
			if (angle >= 360) angle = 0;
		}
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			{
				keyPressd = true;
			}
				
		if (setup->getEvent()->type == SDL_MOUSEBUTTONUP && keyPressd)
		{
			shoot = true; keyPressd = false;
			if (play_shot)
			{
				Mix_PlayChannel(-1, bomerang_effect, 0);
				play_shot = false;
			}
		}
		if (bat_die)
		{
			bat->draw();
			if (bat->playOne(0, 3, 70))
			{
				bat->setPosition(GETOUT, GETOUT);
				bat_die = false;
			}
				
		}
		else
		{
			bat->draw();
			bat->playOne(0, 1, 200);
			if (timeCheck + 7 < SDL_GetTicks())
			{
				bat->setX(bat->getX() - 3);
				int polet = BAT1_START_X - bat->getX();
				if (!(polet % 6))
				{
					if (flyUp)
					{
						bat->setY(bat->getY() - 2);
						if (BAT1_START_Y - bat->getY() > 10) flyUp = !flyUp;
					}
					else
					{
						bat->setY(bat->getY() + 2);
						if (bat->getY() - BAT1_START_Y > 10) flyUp = !flyUp;
					}
				}
				timeCheck = SDL_GetTicks();
			}
		}
		if ((player->getX() + 50) - bat->getX() >= 0)die = true;
		else player->run(true, 1);

		if (player->getX() + 80 >= SCREEN_W) bat_die = false;
	if (player->die(die,lvl[0]))
	{
		bomerang->setX(player->getX() + 115);
		bat->setPosition(BAT1_START_X, BAT1_START_Y);
		die = false; bat_die = false; shoot = false; 
		lvl[6]->setY(0);
	}
}

void Level::lvl_1()
{
	int j = 0;
	player->udpate(0);
	for (int i = 0; i < ARROW; i++)
		arrow[i]->draw();
	for (int i = 0; i < ARROW; i++)
	{
		if (arrow[i]->getY() < SCREEN_H && arrow[i]->getX() - player->getX() <= 120) {
			j = i; // ближайшая стрела к игроку
			arrow[i]->setY(arrow[i]->getY() + 4);
			if(arrow[i]->getY() > 500) arrow[i]->setX(GETOUT);
			}	
	}
	player->run(run,1);

	if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
	{
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			run = false;
	}
	else if (setup->getEvent()->type == SDL_MOUSEBUTTONUP)
	{
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
		{
			run = true;
		}
	}

	if ((arrow[j]->getY() >= player->getY()) &&
		(arrow[j]->getX() - player->getX() <= 75) && (arrow[j]->getX() - player->getX() <= 160))
	{
		die = true; run = false;
	}
		

	if (player->die(die, lvl[1]))
	{
		dest = 190;
		for (int i = 0; i < ARROW; i++)
		{
			arrow[i]->setPosition(dest, START_ARROW_Y);
			dest += rand() % 200 + 140;
		}
		die = false;
		run = true;
		lvl[4]->setY(0);
	}
}

void Level::lvl_2()
{
	static int  k = 0;
	static int j = 0, form = -1;
	static bool draw = false, jump = false, key_pressed = false;
	player->udpate(0);
	for (int i = 0; i < PLATFORM; i++)
	{
		platform[i]->draw();
		if (i > form) platform[i]->playOne(0, 0, 200);
	}
	for (int i = 0; i < PLATFORM; i++)
	{
if (platform[i]->getX() - player->getX() <= 140)
form = i;
	}
	if (!jump)
	{
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
		{
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			{
				draw = true; jump = false;
				j++;
				if (j >= 14 && k < 6)
				{
					j = 0;
					k++; key_pressed = true;
				}
			}
		}
	}

	if (setup->getEvent()->type == SDL_MOUSEBUTTONUP && key_pressed)
	{
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
		{
			draw = false; j = 0; key_pressed = false;
			if (k > 0) jump = true;
		}
	}
	if (player->jump(k, jump, draw, die) || die)
	{
		k = 0; jump = false;

	}

	if (!form)
	{
		if (player->getX() > 30 && player->getX() + 60 < platform[form]->getX() && player->getY() == START_HERO_POSY)
			die = true;
		else
		{
			if (player->getY() == START_HERO_POSY)
				if (platform[0]->playOne(0, 10, 130))  die = true; 
		}
	}
	else if (form > 0 && form + 1 != PLATFORM)
	{
		if (player->getX() - platform[form - 1]->getX() > 30 && player->getX() + 60 < platform[form]->getX() && player->getY() == START_HERO_POSY)
			die = true;
		else {
			if (player->getY() == START_HERO_POSY)
				if (platform[form]->playOne(0, 10, 130)) die = true;


		}
	}

	else if (form + 1 == PLATFORM)
	{
		if (platform[form]->getX() - player->getX() > 80 && player->getY() == START_HERO_POSY) die = true;
		else if (player->getX() - platform[form]->getX() > 20 && player->getX() - platform[form]->getX() < 100 && player->getY() == START_HERO_POSY)
			die = true;
		else if (player->getY() == START_HERO_POSY && player->getX() - platform[form]->getX() < 100)
			if (platform[form]->playOne(0, 10, 130)) die = true;

	}

	if (player->die(die, lvl[2]))
	{
		dest = 190;
		for (int i = 0; i < PLATFORM; i++)
		{
			platform[i]->setX(dest);
			dest += 170;
		}
		die = false; form = -1;
		k = 0;
	}

}

void Level::lvl_3()
{
	bool jump = false;
	static bool keyPressd = false, babam = false, play_effect = true,fly_ghost = true;;
	static int boom = -1;
	int j = 0;
	ghost->draw();
	
	if (timeCheck + 15 < SDL_GetTicks())
	{
		if (fly_ghost)
		{
			ghost->setY(ghost->getY() - 1);
			if (START_HERO_POSY - 140 - ghost->getY() >= 20) fly_ghost = false;
		}
		else
		{
			ghost->setY(ghost->getY() + 1);
			if (START_HERO_POSY - 140 - ghost->getY() < 0) fly_ghost = true;
		}
		timeCheck = SDL_GetTicks();
	}

	if (play_effect && ghost->getX() - player->getX() <= 200)
	{
		Mix_PlayChannel(-1, ghost_effect, 0);
		play_effect = false;
	}

	if (player->getX() - ghost->getX() <= SCREEN_W && player->getX() - ghost->getX() >= -150)
	{
		ghost->playOne(3, 3, 75);
		if (ghost->getX() - player->getX() <= 60 && player->getX() - ghost->getX() <= 60 && player->getY() == START_HERO_POSY - 140)
			die = true;

	}
	else ghost->playOne(0, 0, 200);
	for (int i = 0; i < LEDDER; i++)
	{
		ledder[i]->draw();
	}
	for (int i = 0; i < BOMB; i++)
	{
		bomb[i]->draw();
		if (i > boom)bomb[i]->playOne(0, 0, 200);
	}
	player->udpate(0);
	if(!die)player->run(true,1);

	if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
	{
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			keyPressd = true;
			
	}

	if (setup->getEvent()->type == SDL_MOUSEBUTTONUP  && keyPressd){
		jump = !jump; keyPressd = false; /*MAYBE FIX*/
	}
			
	if (jump)
	{
		for (int i = 0; i < LEDDER; i++)
			if (ledder[i]->getX() - player->getX() <= 70)
				j = i;

			if (ledder[j]->getX() - player->getX() <= 50 && player->getX() - ledder[j]->getX() < 40 && player->getY() == START_HERO_POSY)
			{
				player->setY(START_HERO_POSY - 140);
			}
			else if (ledder[j]->getX() - player->getX() <=50 && player->getX() - ledder[j]->getX() < 40 && player->getY() == (START_HERO_POSY - 140))
				player->setY(START_HERO_POSY );
	}
	for (int i = 0; i < BOMB; i++)
		if (bomb[i]->getX() - player->getX() <= 70 && player->getX() - bomb[i]->getX() <=20 && player->getY() <= bomb[i]->getY() &&
			 bomb[i]->getY() - player->getY() <=60)
			{
				boom = i; die = true; babam = true;
				
			}
	if(boom >= 0 && babam) bomb[boom]->playOne(1, 7, 35);
	if (player->die(die, lvl[3]))
	{
		boom = -1; die = false;
		lvl[8]->setY(0);
		play_effect = true;
	}
	
}

void Level::lvl_4()
{
	
	static bool first = true;
	if (first)
	{
		int dest = 190;
		for (int i = 0; i < ARROW; i++)
		{
			arrow[i]->setPosition(dest, START_ARROW_Y);
			dest += rand() % 300 + 170;
		}
		bat->setPosition(BAT1_START_X - 200, BAT1_START_Y - 45);
		first = false;
	}
	lvl_1();
	bat->playOne(0, 1, 200);
	bat->draw();
	if (timeCheck + 15 < SDL_GetTicks())
	{
		bat->setX(bat->getX() - 3);
		int polet = BAT1_START_X - bat->getX() - 200;
		if (!(polet % 6))
		{
			if (flyUp)
			{
				bat->setY(bat->getY() - 2);
				if (BAT1_START_Y - bat->getY() >= 55) flyUp = !flyUp;
			}
			else
			{
				bat->setY(bat->getY() + 2);
				if (bat->getY() - BAT1_START_Y  >= -35) flyUp = !flyUp;
			}
		}
		timeCheck = SDL_GetTicks();
	}
	if ((player->getX() + 50) - bat->getX() >= 0 && player->getY() - bat->getY() <= 40  && bat->getX() - (player->getX()- 10) >=0) die = true;
	if (die) {
		bat->setPosition(BAT1_START_X - 200, BAT1_START_Y - 30);
		if (player->die(die, lvl[4]))
			die = false;		
			
	}
	

}

void Level::lvl_5()
{
	static bool keyPressd = false;
	static double  i = 0;
	spike->draw();
	player->udpate(0);
	if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
	{
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			keyPressd = true;
	}
	if (keyPressd)
	{
		if (setup->getEvent()->type == SDL_MOUSEBUTTONUP) {
			i += 0.5; // С каждым нажатием перемещение увеличивается
			keyPressd = false; /*MAYBE FIX*/
		}
	}
	else if (i >= 0)i -= 0.03;

	if (timeCheck + 10 < SDL_GetTicks()) //Плавноге движение
	{
		for (int j = 0; j < i; j++)
		{
			player->setX(player->getX() + 1);
		}
		timeCheck = SDL_GetTicks();
		spike->setY(spike->getY() + 1);
	}
	if (player->getY() - spike->getY() <= 40 + (-SPIKE_POS_Y))
	{
		die = true;
		i = 0;
	}
	if (player->die(die, lvl[5]))
	{
		die = false;  i = 0;
		spike->setY(SPIKE_POS_Y);
	}


}

void Level::lvl_6()
{
	static bool first = true;
	static int boom = -1;
	if (first)
	{
		bat->setPosition(BAT1_START_X, BAT1_START_Y);
		first = false;
	}
	lvl_0();
	for (int i = 0; i < BOMB; i++)
	{
		bomb[i]->draw();
		if (i > boom) bomb[i]->playOne(0, 0, 200);
	}
	for (int i = 0; i < BOMB; i++)
	{
		if (bomb[i]->getX() - player->getX() <= 70 && player->getX() - bomb[i]->getX() <= 60)
		{
			die = true;  boom = i;
		}
		else if (bomerang->getX() - bomb[i]->getX() >= 50 && bomerang->getX() - bomb[i]->getX() <= 60)
		{
			boom = i;
		}
	}
	if (boom>-1) if (bomb[boom]->playOne(1, 7, 35)) bomb[boom]->setX(GETOUT);
	if (die)
	{
		player->die(die, lvl[6]);
		boom = -1; dest = 340;
		for (int i = 0; i < BOMB; i++)
		{
			bomb[i]->setX(dest); dest += 480;
		}
	}
}

void Level::lvl_7()
{
	player->udpate(0);
	int here = 0; // 1st bomb
	static bool first = true, key_pressed = false, play_effect=true;
	static int  k = 0, j = 0;
	static bool draw = false, jump = false, boom = false;
	if (first)
	{
		bat->setPosition(BAT1_START_X - 240, BAT1_START_Y );
		ghost->setPosition(BAT1_START_X - 35, BAT1_START_Y + 30);
		bomb[here]->setX(BAT1_START_X - 470);
		first = false; boom = false; play_effect = true;
	}
	if (!die) player->run(true,1);
	ghost->draw();
	bat->draw();
	bat->playOne(0, 1, 200);


	if (timeCheck + 15 < SDL_GetTicks())
	{
		bat->setX(bat->getX() - 3);
		int polet = BAT1_START_X - bat->getX();
		if (!(polet % 6))
		{
			if (flyUp)
			{
				bat->setY(bat->getY() - 2);
				ghost->setY(ghost->getY() - 1);
				if (BAT1_START_Y - bat->getY() > 10) flyUp = !flyUp;
			}
			else
			{
				bat->setY(bat->getY() + 2);
				ghost->setY(ghost->getY() + 1);
				if (bat->getY() - BAT1_START_Y > 10) flyUp = !flyUp;
			}
		}
		timeCheck = SDL_GetTicks();
	}
	if (bat->getX() - player->getX() <= 30 && player->getX() - bat->getX() <= 20 && bat->getY() - player->getY() <= 90) {
		die = true; 
	}

	if (!jump)
	{
		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
		{
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
			{
				draw = true; jump = false; 
				j++;
				if (j >= 14 && k < 6)
				{
					j = 0; key_pressed = true;
					k++;
				}
			}

		}
	}
	if (setup->getEvent()->type == SDL_MOUSEBUTTONUP && key_pressed){
		if (setup->getEvent()->button.button == SDL_BUTTON_LEFT){
				draw = false; j = 0; key_pressed = false;
				if (k > 0) jump = true;
		}
	}
	if (bomb[here]->getX() - player->getX() <= 50 && bomb[here]->getY() - player->getY() <= 100 && player->getX() - bomb[here]->getX() <=10)
	{
		die = true; boom = true; 
	}
	if (!boom) bomb[here]->playOne(0, 0, 200);
	else bomb[here]->playOne(0, 7, 45);
	bomb[here]->draw();
	if (player->jump(k, jump, draw, die) || die)
	{
		k = 0; jump = false;

	}
	if (player->getX() - ghost->getX() <= SCREEN_W && player->getX() - ghost->getX() >= -150)
	{
		ghost->playOne(3, 3, 45);

		if (ghost->getX() - player->getX() <= 50 && ghost->getY() - player->getY() <= 110 && player->getX() - ghost->getX() <= 20) {
			die = true; 
		}

	}
	else if (ghost->getX() - player->getX() <= 150)
	{
		ghost->playOne(0, 3, 75);

	}
	else ghost->playOne(0, 0, 200);

	if (play_effect && ghost->getX() - player->getX() <= 250)
	{
		Mix_PlayChannel(-1, ghost_effect, 0);
		play_effect = false;
	}

	if (player->die(die, lvl[7]))
	{
		die = false;
		k = 0;
		first = true;
	}

	
}

void Level::lvl_8()
{
	static bool first = true;
	int here = 1; // 1st bomb
	int bat_x = 500, bat_y = 245;
	int side = 1;
	static double speed = 3;
	if (first)
	{
		bat->setPosition(BAT1_START_X - 440, BAT1_START_Y + 75);
		ghost->setX(GETOUT);
		bomb[here]->setY(245);
		dest = 340;
		for (int i = 0; i < BOMB; i++)
		{
			bomb[i]->setX(dest);
			dest += 200;
		}
		bat->setPosition(bat_x, bat_y);
		side = 1;
		speed = 3;
		first = false;
	}
	if (player->getX() >= ledder[1]->getX())
	{
		bat_x = 400, bat_y = BAT1_START_Y; side = -1;
	}
	if (player->getX() == ledder[1]->getX())
	{
		side = -2;
		bat->setPosition(bat_x, bat_y);
	}
	if (side == -1) speed += 0.015;
	if (timeCheck + 15 < SDL_GetTicks())
	{
		bat->setX(bat->getX() - (speed*side));
	
			if (flyUp)
			{
				bat->setY(bat->getY() - 2);
				if (bat_y - bat->getY() > 10) flyUp = !flyUp;
			}
			else
			{
				bat->setY(bat->getY() + 2);
				if (bat->getY() - bat_y > 10) flyUp = !flyUp;
			}
		timeCheck = SDL_GetTicks();
	}
	lvl_3();
	bat->draw();
	bat->playOne(0, 1, 200);
	if ((player->getX() + 50) - bat->getX() >= 0 && (player->getX() + 40) - bat->getX() <= 20  &&  
		player->getY() <= bat->getY() && bat->getY() - player->getY() <= 80) die = true;
	if (die)
	{
		player->die(die, lvl[8]);
		first = true;

	}
	
}

void Level::lvl_9() 
{
	static double angle = 0;
	static bool first = true;
	static int side = -1, i = 0;
	static bool keyPressd = false, play_shot = true;
	static bool bom_fly = true, boss_run = false,
		bossComeToMe = false, boss_jump = true;
	static int life_bar = HP, num_jump = 0;
	static bool rock_fall[ROCK] = { 0 };
	if (life_bar)
	{
		if (play_shot)
		{
			Mix_PlayChannel(-1, bomerang_effect, 0);
			play_shot = false;
		}
		if (first) // старт/рестарт уровня
		{
			player->setX(100);
			bomerang->setX(player->getX() + 115);
			boss->setPosition(START_BOSS_X, START_BOSS_Y);
			first = false;
			for (int j = 0; j < ROCK; j++)
			{
				rock[j]->setY(START_ROCK);
				rock_fall[j] = false;
			}
			num_jump = 0;
		}
		hp_metr->setPosition(boss->getX(), boss->getY() - 20);  //Здоровье босс
		hp_metr->draw();
		for (int i = 0; i < life_bar; i++) {
			hp[0]->setPosition(hp_metr->getX() + 9, hp_metr->getY() + 8);
			if (i > 0) hp[i]->setPosition(hp[i - 1]->getX() + 14, hp[i - 1]->getY());
			hp[i]->draw();
		}

		for (int j = 0; j < ROCK; j++) // Падение камней и столкновение с ними
		{
			if (rock[j]->getX() - player->getX() <= 100 && player->getX() - rock[j]->getX() <= 30)
				rock_fall[j] = true;
			if(rock_fall[j]) rock[j]->setY(rock[j]->getY() + 3); 
			rock[j]->draw();
			if (rock[j]->getX() - player->getX() <= 70 && player->getX() - rock[j]->getX() <= 0 && player->getY() - rock[j]->getY() <= 20)
				die = true;
			if (rock[j]->getY() >= 500)
			{
				rock[j]->setY(START_ROCK);
				rock_fall[j] = false;
			}
		}

		boss->playOne(0, 1, 200);
		boss->draw();
		player->udpate(2);
		if (!die) player->run(true, pow(side, i));
		if (!bossComeToMe && num_jump < 2) //прыжок 
		{
			if (timeCheck + 4 < SDL_GetTicks())
			{
				if (boss_jump) {
					boss->setY(boss->getY() - 1);
					if (START_BOSS_Y - boss->getY() >= 40)
					{
						Mix_PlayChannel(-1, jumpB, 0);
						boss_jump = !boss_jump;
					}
				}
				else {
					boss->setY(boss->getY() + 2);
					if (START_BOSS_Y <= boss->getY())
					{
						boss_jump = !boss_jump;
						num_jump++;
					}
				}
				timeCheck = SDL_GetTicks();
			}
		}
		if (bomerang->getX() - boss->getX() >= 40) 
		{										
			shoot = true;		// попадание по боссу	
			Mix_PlayChannel(-1, hurt, 0);
			bossComeToMe = true; 
			boss->setY(START_BOSS_Y);
		}
		if ((timeCheck + 10 < SDL_GetTicks()) && bossComeToMe)
		{
			if (boss_run)
			{
				boss->setX(boss->getX() - 2);
				if (START_BOSS_X - boss->getX() >= 80)
					boss_run = false;
			}
			else
			{
				boss->setX(boss->getX() + 2);
				if (boss->getX() >= START_BOSS_X) {
					boss_run = true;
					bossComeToMe = false;
				}

			}
			timeCheck = SDL_GetTicks();
		}

		if (setup->getEvent()->type == SDL_MOUSEBUTTONDOWN && mousePos())
		{
			if (setup->getEvent()->button.button == SDL_BUTTON_LEFT)
				keyPressd = true;
		}

		if (setup->getEvent()->type == SDL_MOUSEBUTTONUP && keyPressd){
			i++; keyPressd = false;
			num_jump = 0;
		}
		bomerang->drawFlip(angle);
		if (bomerang->getX() - player->getX() <= 300 && bom_fly)
		{
			bomerang->setX(bomerang->getX() + 3);
			if (bomerang->getX() - boss->getX() >= 45 && bomerang->getX() - boss->getX() <= 50)
			{
				bom_fly = false;
				if (bomerang->getX() - player->getX() >= 130) 
					life_bar--;
			}
		}
		else {
			bom_fly = false;
			if (bomerang->getX() - player->getX() >= 115) bomerang->setX(bomerang->getX() - 3);
			if (bomerang->getX() - player->getX() <= 115)
			{
				shoot = false;
				bom_fly = true;
				play_shot = true;
			}
		}
		angle += 13;
		if (angle >= 360) angle = 0;

		if (player->getX() < 80 || boss->getX() - player->getX() <= 85) die = true;

		if (player->die(die, lvl[9]))
		{
			life_bar = HP;
			first = true;
			die = false;
			i = 0;
		}
	}
	else
	{	
		static bool play = true;
		if (play) {
			Mix_PlayChannel(-1, boss_dead, 0);
			play = false;
		}
		boss->setY(boss->getY() + 1);
		boss->playOne(0, 1, 200);
		boss->draw();
		player->udpate(0);
		player->draw();
		if (boss->getY() >= SCREEN_H+70) 
			player->run(true, 1);
	}
		
}

void Level::victory()
{
	static bool first = true;
	if (first)
	{
		Mix_PlayMusic(vik, -1);
		remove("Data/checkpoint.bin");
		final = true;
		first = false;
	}
	Victory->draw();
	dest = 720;
	for (int i = 0; i < CLICK; i++)
	{
		you_click[i]->setPosition(dest, 340);
		dest+=30;
	}
	writeText();

}

void Level::writeText()
{
	int score = 0;
	int x = click / 10;
	if (click < 10) 
	{
		score = 1;
		you_click[0]->playOne(click % 10, click % 10, 1);
	}
	else if (click < 100)
	{
		score = 2;
		you_click[0]->playOne(click / 10, click / 10, 1);
		you_click[1]->playOne(click % 10, click % 10, 1);
	}
	else if (click < 1000) 
	{
		score = 3;
		you_click[0]->playOne(click / 100, click / 100, 1);
		you_click[1]->playOne(x % 10, x % 10, 1);
		you_click[2]->playOne(click % 10, click % 10, 1);
	}
	

	for (int i = 0; i < score; i++)
		you_click[i]->draw();

		


}

bool Level::mousePos() // Если мышь не на кнопках 
{
	int x = 0, y = 0;
	if(y = setup->getEvent()->motion.y <= 57) return false;
	return true;
}

bomerang.h
#pragma once
#include "sprite.h"
#include "setup.h"
class Bomerang  {
public:
	Bomerang(Setup* passed_setup);
	~Bomerang();
	void draw();
	void drawFlip(double angle);
	void setX(int x);
	void setY(int y);
	int getX();
	int getY();
private:
	Sprite* bomerang;
	Setup* setup;
	
};

bomerang.cpp
#include "includes.h"
#include "bomerang.h"


Bomerang::Bomerang (Setup* passed_setup)
{
	setup = passed_setup;
	bomerang=new Sprite(setup->getRender(), "Data/img/boomerang.png", START_BOOMERANG, START_HERO_POSY+65, 20 *6 , 20*6 );
	
}


Bomerang::~Bomerang()
{
	delete bomerang;
	delete setup;
}

void Bomerang::draw()
{
	bomerang->draw();
}

void Bomerang::drawFlip(double angle)
{
	SDL_Point centre = {10,10};
	bomerang->drawFlip(angle,&centre);
}

void Bomerang::setX(int x)
{
	bomerang->setX(x);
}

void Bomerang::setY(int y)
{
	bomerang->setY(y);
}

int Bomerang::getX()
{
	return bomerang->getX();
}

int Bomerang::getY()
{
	return bomerang->getY();
}


includes.h
#pragma once
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_mixer.h>
#include <iostream>

#define SCREEN_W 1024
#define SCREEN_H 680
#define LVL 10
#define START_HERO_POSY  350
#define INCREASE_HERO_X  8 // Увеличение персонажа по Х
#define INCREASE_HERO_Y  7 // Увеличение персонажа по Y
#define LAVA 4 
#define START_BOOMERANG 133
#define GETOUT 3000
#define LAVA_Y 551
#define FIRE 3
#define START_FIRE_Y 210
#define CLICK 3

//LVL 1
#define BAT1_START_X 740
#define BAT1_START_Y 350

//LVL 2
#define ARROW 4
#define START_ARROW_Y 40

//LVL 3
#define PLATFORM 4
#define START_PLATFORM_Y 450

//LVL 4
#define LEDDER 3
#define BOMB 2
#define START_BOMB_Y 390
#define START_LEDDER_Y 250

//LVL 6
#define SPIKE_POS_Y -630

//LVL 10
#define START_BOSS_X 830
#define START_BOSS_Y 284
#define HP 13
#define ROCK 4
#define START_ROCK -40




